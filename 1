#include "minishell.h"

//void    add_back(void *data)
//{
//
//}
void append(struct Node** head_ref, char * new_data, int type)
{
	/* 1. allocate node */
	t_linked_list * new_node = (struct Node*) malloc(sizeof(t_linked_list));

	t_linked_list *last = *head_ref;  /* used in step 5*/

	/* 2. put in the data  */
	new_node->data->file = new_data;

	/* 3. This new node is going to be the last node, so make next
	   of it as NULL*/
	new_node->next = NULL;

	/* 4. If the Linked List is empty, then make the new node as head */
	if (*head_ref == NULL)
	{
		*head_ref = new_node;
		return;
	} 

	/* 5. Else traverse till the last node */
	while (last->next != NULL)
		last = last->next;

	/* 6. Change the next of last node */
	last->next = new_node;
	return;   
}
void				*free_pre(char **split, int k)
{
	while (k >= 0)
	{
		free(split[k]);
		k--;
	}
	free(split);
	split = NULL;
	return (NULL);
}

static	int		len_word(const char *s, char c)
{
	int	i;
	size_t	len;

	i = 0;
	len = 0;
	while (s[i] == c)
		i++;
	if (s[i] =='"')
	{
		len++;
		i++;

		while(s[i] != '"')
		{
			len++;
			i++ ;
		}
		i++;
	}
	while (s[i] != c && s[i])
	{
		if (s[i] == '"')
		{
			len++;
			i++;
			while(s[i] != '"' )
			{
				len++;
				i++;
			}
		}
		else if (s[i] != c && s[i])
			len++;
		i++;

	} 
	return (len);
}
static	int		count_word(const char *s, char c)
{
	size_t	i;
	size_t	count;

	i = 0;
	count = 0;
	while (s[i])
	{
		if (s[i] != c)
			count++;
		if (s[i] == '"')
		{
			i++;
			while(s[i] != '"')
				i++;
		}
		while (s[i] != c && s[i + 1])
			i++;
		i++;
	}
	return (count);
}

char				**ft_split(char const *s, char c)
{
	int	i;
	size_t	j;
	size_t	k;
	char	**split;

	i = 0;
	k = 0;
	if (!s || !(split = (char **)malloc(sizeof(char *)
					* (count_word(s, c) + 1))))
		return (NULL);
	while (i < count_word(s, c))
	{
		if (!(split[i] = (char *)malloc(sizeof(char)
						* (len_word(&s[k], c) + 1))))
			return ((free_pre(split, k - 1)));
		j = 0;
		while (s[k] == c)
			k++;
		while (s[k] != c && s[k])
		{

			if (s[k] == '"')
			{
				split[i][j] = s[k];
				k++;
				j++;
				while (s[k] != '"')
				{
					split[i][j] = s[k];
					j++;
					k++;
				}
			}
			split[i][j] = s[k];
			j++;
			k++;
			if (s[k] == '"')
			{
				split[i][j] = s[k];
				k++;
				j++;
				while (s[k] != '"')
				{
					split[i][j] = s[k];
					j++;
					k++;
				}
			}
		}

		split[i][j] = '\0';
		i++;
	}
	split[i] = NULL;
	return (split);
}
	int     findtype()
int    main()
{
	int i;
	char *buffer;
	int n;
	int type;
	char **split;

	type = 0;
	split = NULL;
	t_linked_list *head =NULL;


	t_file *file;

	file = (t_file*)malloc(sizeof(t_file));
	while (1)

	{i = 0;
		write(1, "Minishell:0.0> ", 15);
		buffer = malloc(sizeof(char) * (1025));
		n = read(STDIN_FILENO, buffer, 1024);
		buffer[n] = '\0';
		split = ft_split(buffer, ' ');
		n = 0;
		while (split[n])
		{
			printf("%s",split[n]);
			n++;
		}
		n = 0;
		while (split[n]){

			type = findtype(split[n]);
			append(&head, split[n], type);
		}


	}

}

